from linebot.models import FlexSendMessage, MessageEvent, TextSendMessage
from linebot.exceptions import InvalidSignatureError
from linebot.aiohttp_async_http_client import AiohttpAsyncHttpClient
from linebot import AsyncLineBotApi, WebhookParser
from fastapi import Request, FastAPI, HTTPException
import logging
import cv2
import re
import aiohttp
import numpy as np
import os
import sys
import tempfile
from dotenv import load_dotenv
from tensorflow.keras.models import load_model
from PIL import Image
from io import BytesIO
from sklearn.preprocessing import LabelEncoder
from fastapi import Request, Response, HTTPException
from linebot.exceptions import InvalidSignatureError
from fastapi import FastAPI, Request, HTTPException
from linebot.models import MessageEvent, TextSendMessage
import os
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"


# ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ environment
load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ environment
channel_secret = os.getenv('ChannelSecret')
channel_access_token = os.getenv('ChannelAccessToken')

if not channel_secret or not channel_access_token:
    logging.error("Missing LINE channel credentials")
    sys.exit(1)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Keras
try:
    model = load_model('model_final_1.h5')
    logging.info("Model loaded successfully")
except Exception as e:
    logging.error(f"Error loading model: {e}")
    sys.exit(1)

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢ (‡∏£‡∏ß‡∏°‡∏Ñ‡∏•‡∏≤‡∏™ Unknown)
disease_info = {
   "Healthy": """
üåø ‡∏≠‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ

‚úÖ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ
- ‡πÉ‡∏ö‡∏°‡∏µ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏î‡πÉ‡∏™ ‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠  
- ‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≠‡∏¢‡πÅ‡∏ï‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥  
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥  

üõ°Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤
- ‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πã‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°  
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥  
- ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ä‡∏û‡∏∑‡∏ä‡πÅ‡∏•‡∏∞‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä  
    """,
    "Mosaic": """
üåø ‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡∏≠‡πâ‡∏≠‡∏¢ 

‚ö†Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ
- ‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏î‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á  
- ‡πÉ‡∏ö‡∏≠‡∏≤‡∏à‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥  
- ‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏≠‡∏≤‡∏à‡πÅ‡∏Ñ‡∏£‡∏∞‡πÅ‡∏Å‡∏£‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡πà‡∏≥  

üîé ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ 
- ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏£‡∏±‡∏™ Sugarcane Mosaic Virus (SCMV)
- ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô ‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏≠‡πà‡∏≠‡∏ô (Aphids) ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞  
- ‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠  

üõ°Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ  
- ‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô KK3, LK92-11 
- ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏ä‡∏µ‡∏ß‡∏†‡∏±‡∏ì‡∏ë‡πå  
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏≤‡∏î  

üíä ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
- ‡∏≠‡∏¥‡∏°‡∏¥‡∏î‡∏≤‡∏Ñ‡∏•‡∏≠‡∏û‡∏£‡∏¥‡∏î (Imidacloprid)
- ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ Beauveria bassiana  

üå± ‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ
- ‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡∏ï‡πâ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏ 1-2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
- ‡πÉ‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏î‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏•‡∏≤‡∏¢‡πÇ‡∏°‡πÄ‡∏™‡∏Ñ  

üìÉ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:
- [‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£](https://www.doa.go.th)  
- [‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤](https://www.tjpp.org)  
    """,
    "Rust": """
üåø ‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏™‡∏ô‡∏¥‡∏° (Rust Disease)

‚ö†Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ  
- ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πâ‡∏°‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÉ‡∏ö  
- ‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤  
- ‡∏û‡∏ö‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏•‡∏∞‡∏≠‡∏≠‡∏á‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏™‡∏ô‡∏¥‡∏°  

üîé ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ
- ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ Puccinia kuehnii 
- ‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏°‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏ù‡∏ô 
 
üõ°Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ 
- ‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô K88-92, Suphanburi 50
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡πâ‡∏≠‡∏¢‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ó  

üíä ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ 
- ‡πÑ‡∏ï‡∏£‡∏ü‡∏≠‡∏Å‡∏ã‡∏µ‡πà‡∏™‡πÇ‡∏ï‡∏£‡∏ö‡∏¥‡∏ô (Trifloxystrobin) 
- ‡πÇ‡∏û‡∏£‡∏û‡∏¥‡πÄ‡∏ô‡∏ö (Propineb)

üå± ‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ
- ‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡∏≠‡πâ‡∏≠‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏ 2-3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô  
- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ú‡∏•‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•  

üìÉ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:
- [‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå](https://www.agri.kps.ku.ac.th)  
- [‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå](https://www.ku.ac.th)  
    """,
    "RedRot": """
üåø ‡πÇ‡∏£‡∏Ñ‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏ô‡πà‡∏≤‡πÅ‡∏î‡∏á (Red Rot Disease)

‚ö†Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ
- ‡πÉ‡∏ö‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏´‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á  
- ‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏£‡∏≠‡∏¢‡πÅ‡∏ï‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á-‡∏î‡∏≥  
- ‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏´‡∏°‡πá‡∏ô  

üîé ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ
- ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ Colletotrichum falcatum 
- ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Å  

üõ°Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ
- ‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏ô‡πÇ‡∏£‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô KPS94-13, U-Thong 2
- ‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡πâ‡∏≠‡∏¢‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡∏ä‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πâ‡∏≠  

üíä ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ  
- ‡πÅ‡∏°‡∏ô‡πÇ‡∏Ñ‡πÄ‡∏ã‡∏ö (Mancozeb) 
- ‡∏Ñ‡∏≤‡∏£‡πå‡πÄ‡∏ö‡∏ô‡∏î‡∏≤‡∏ã‡∏¥‡∏° (Carbendazim) 

üå± ‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ 
- ‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô ‡∏≠‡πâ‡∏≠‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏ 3-5 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 
- ‡πÉ‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏â‡∏≤ ‡πÅ‡∏•‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏¢‡πÅ‡∏ï‡∏Å  

üìÉ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: 
- [‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£(https://www.doa.go.th), 
- [IRRI (International Rice Research Institute)(https://www.irri.org)  
    """,
    "Yellow": """
üåø ‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ (Leaf Scald Disease)

‚ö†Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ 
- ‡πÉ‡∏ö‡∏°‡∏µ‡∏£‡∏≠‡∏¢‡πÑ‡∏´‡∏°‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô‡∏•‡∏ß‡∏Å  
- ‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ä‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏ï‡∏≤‡∏¢‡∏ï‡πâ‡∏ô  

üîé ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ
- ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢ Xanthomonas albilineans
- ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏•‡∏á‡∏û‡∏≤‡∏´‡∏∞  

üõ°Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ 
- ‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô **Suphanburi 7**  
- ‡πÅ‡∏ä‡πà‡∏ó‡πà‡∏≠‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÉ‡∏ô‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô 50¬∞C ‡∏ô‡∏≤‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠  

üíä ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ 
- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ó‡∏ô  

üå± ‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ 
- ‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ï‡∏Å‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà  
- ‡πÉ‡∏ö‡∏°‡∏µ‡∏£‡∏≠‡∏¢‡∏ã‡∏µ‡∏î‡∏Ç‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÑ‡∏´‡∏°‡πâ  

üìÉ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: 
- [‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£](https://www.doa.go.th)  
- [FAO (Food and Agriculture Organization)(https://www.fao.org)  
    """
}

# ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
disease_display_names = {
    "Healthy": "‡∏≠‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ",
    "Mosaic": "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡∏≠‡πâ‡∏≠‡∏¢",
    "Rust": "‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏™‡∏ô‡∏¥‡∏°",
    "RedRot": "‡πÇ‡∏£‡∏Ñ‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏ô‡πà‡∏≤‡πÅ‡∏î‡∏á",
    "Yellow": "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ",
    "Unknown": "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÇ‡∏£‡∏Ñ"
}

app = FastAPI()
session = aiohttp.ClientSession()
line_bot_api = AsyncLineBotApi(channel_access_token, AiohttpAsyncHttpClient(session))
parser = WebhookParser(channel_secret)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LabelEncoder
label_encoder = LabelEncoder()
label_encoder.classes_ = np.array(["Healthy", "Mosaic", "RedRot", "Rust", "Yellow", "Unknown"])

def remove_background(img):
    """‡∏ï‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥"""
    try:
        # Convert to HSV
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢
        lower_green = np.array([25, 40, 40])
        upper_green = np.array([95, 255, 255])
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡∏î‡πâ‡∏ß‡∏¢ inRange
        mask = cv2.inRange(hsv, lower_green, upper_green)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á mask ‡∏î‡πâ‡∏ß‡∏¢ morphological operations
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (7,7))
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel, iterations=2)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel, iterations=1)
        
        # ‡∏´‡∏≤ contour ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            cv2.drawContours(mask, [largest_contour], -1, 255, thickness=cv2.FILLED)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
        result = img.copy()
        result[mask == 0] = [0, 0, 0]  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
        
        return result, mask
    except Exception as e:
        logging.error(f"Background removal error: {e}")
        return img, None

def check_image_characteristics(img):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
        if img.shape[0] < 100 or img.shape[1] < 100:
            return False
        
        # ‡∏ï‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö mask
        _, mask = remove_background(img)
        
        if mask is None:
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        green_pixels = cv2.countNonZero(mask)
        green_ratio = green_pixels / (img.shape[0] * img.shape[1])
        
        return green_ratio > 0.2
    except Exception as e:
        logging.error(f"Image check error: {e}")
        return False

def preprocess_image(image_data):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏£‡∏µ‡πÇ‡∏û‡∏£‡πÄ‡∏ã‡∏™‡∏†‡∏≤‡∏û"""
    try:
        nparr = np.frombuffer(image_data, np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏û
        if not check_image_characteristics(img):
            return None, "‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏µ
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img = cv2.resize(img, (224, 224))
        return np.expand_dims(img, axis=0), None
    except Exception as e:
        logging.error(f"Preprocessing error: {e}")
        return None, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û"

def calculate_ood_score(predictions):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Out-of-Distribution"""
    epsilon = 1e-10
    entropy = -np.sum(predictions * np.log(predictions + epsilon))
    return entropy

async def classify_image(image_data):
    """‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"""
    try:
        # ‡∏û‡∏£‡∏µ‡πÇ‡∏û‡∏£‡πÄ‡∏ã‡∏™‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û
        processed_image, error_msg = preprocess_image(image_data)
        if error_msg:
            return error_msg

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
        prediction = model.predict(processed_image)[0]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OOD
        ood_score = calculate_ood_score(prediction)
        if ood_score > 1.2:
            return disease_info["Unknown"]

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        confidence = np.max(prediction) * 100
        if confidence < 65:
            return disease_info["Unknown"]

        # ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏™
        predicted_class = np.argmax(prediction)
        disease_name = label_encoder.inverse_transform([predicted_class])[0]

        return (
            f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢: {disease_name}\n"
            f"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: {confidence:.2f}%\n\n"
            f"{disease_info.get(disease_name, disease_info['Unknown'])}"
        )
    except Exception as e:
        logging.error(f"Classification error: {e}")
        return disease_info["Unknown"]
    


@app.get("/")
def read_root():
    return {"message": "Hello, FastAPI!"}

app = FastAPI()
@app.post("/callback")
async def handle_callback(request: Request):
    signature = request.headers.get('X-Line-Signature', '')
    body = await request.body()
    
    try:
        events = parser.parse(body.decode(), signature)
    except InvalidSignatureError:
        raise HTTPException(status_code=400, detail="Invalid signature")

    for event in events:
        if not isinstance(event, MessageEvent):
            continue
 
        elif event.message.type == "text":
            msg = event.message.text
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
            if msg.strip() == "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ":
                response = "‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡πâ‡∏≠‡∏¢‡πÉ‡∏à‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ
            elif any(kw in msg for kw in ["‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á", "‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£", "‡πÇ‡∏£‡∏Ñ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£", "‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏≠‡∏¢","‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á""‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢", 
             "‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢", "‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏≠‡∏¢", "‡πÇ‡∏£‡∏Ñ‡∏≠‡πà‡∏≠‡∏¢", "‡∏≠‡πâ‡∏≠‡∏¢", "‡πÇ‡∏£‡∏Ñ", "‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ", "‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢", 
            "‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏Å‡∏µ‡πà‡πÇ‡∏£‡∏Ñ", "‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á", "‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£", "‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢", "‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏î‡πâ", 
            "‡πÇ‡∏£‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á", "‡∏≠‡πâ‡∏≠‡∏¢‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á", "‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä‡∏≠‡πâ‡∏≠‡∏¢", "‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä‡πÉ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢", "‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á", 
            "‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ", "‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á", "‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏∞‡πÑ‡∏£", "‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£", 
            "‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏≠‡πâ‡∏≠‡∏¢", "‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢", "‡πÇ‡∏£‡∏Ñ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡πâ‡∏≠‡∏¢", "‡πÇ‡∏£‡∏Ñ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢", "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢", 
            "‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡πâ‡∏≠‡∏¢‡∏ï‡∏≤‡∏¢", "‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏¢", "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á", "‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏à‡∏≠‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á"]):
                diseases = [disease_display_names[d] for d in disease_info.keys() if d != "Unknown"]
                disease_list = "\n- ".join(diseases)
                response = f"üìú ‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n- {disease_list}\n\nüñºÔ∏è ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞"
             # ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πâ‡∏≠‡∏¢‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            elif any(kw in msg for kw in ["‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡∏≠‡πâ‡∏≠‡∏¢","‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á","Mosaic","mosaic","‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á","‡∏î‡πà‡∏≤‡∏á","‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡∏≠‡πâ‡∏≠‡∏¢"]):
                response = "‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡∏≠‡πâ‡∏≠‡∏¢(Mosaic)‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞" \
                            "‚ö†Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ" \
                            "- ‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏î‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á" \
                            "- ‡πÉ‡∏ö‡∏≠‡∏≤‡∏à‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥  " \
                            "- ‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏≠‡∏≤‡∏à‡πÅ‡∏Ñ‡∏£‡∏∞‡πÅ‡∏Å‡∏£‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡πà‡∏≥  " \
                            "üîé ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ " \
                            "- ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏£‡∏±‡∏™ Sugarcane Mosaic Virus (SCMV)" \
                            "- ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô ‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏≠‡πà‡∏≠‡∏ô (Aphids) ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞  " \
                            "- ‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠  " \
                            "üõ°Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ  " \
                            "- ‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô KK3, LK92-11 " \
                            "- ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏ä‡∏µ‡∏ß‡∏†‡∏±‡∏ì‡∏ë‡πå  " \
                            "- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡πâ‡∏≠‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏≤‡∏î  " \
                            "üíä ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ" \
                            "- ‡∏≠‡∏¥‡∏°‡∏¥‡∏î‡∏≤‡∏Ñ‡∏•‡∏≠‡∏û‡∏£‡∏¥‡∏î (Imidacloprid)" \
                            "- ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ Beauveria bassiana  " \
                            "üå± ‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ" \
                            "- ‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡∏ï‡πâ‡∏ô‡∏≠‡πâ‡∏≠‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏ 1-2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" \
                            "- ‡πÉ‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏î‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏•‡∏≤‡∏¢‡πÇ‡∏°‡πÄ‡∏™‡∏Ñ  " \
                            "üìÉ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:" \
                            "- [‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£](https://www.doa.go.th)  " \
                            "- [‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤](https://www.tjpp.org)"

            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πâ‡∏≠‡∏¢‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            elif any(kw in msg for kw in ["‡πÇ‡∏£‡∏Ñ", "‡∏≠‡πâ‡∏≠‡∏¢"]):
                response = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ"
            
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            else:
                response = "‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏≠‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            
            await line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=response))
        elif event.message.type == "image":
            try:
                message_content = await line_bot_api.get_message_content(event.message.id)
                image_data = b''
                
                async for chunk in message_content.iter_content():
                    image_data += chunk

                result = await classify_image(image_data)
                
                await line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text=result))
                
            except Exception as e:
                logging.error(f"Image processing error: {e}")
                await line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text=disease_info["Unknown"]))
    return {"status": "ok"}